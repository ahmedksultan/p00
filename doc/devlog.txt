Printer Carts
SoftDev1 pd1
p00 - FoldOver.io
DEVLOG

ayhamA -- 2019-10-18 18:00
    - DB Design and Components and Desc mk1
    - Relationship between components and front and backend desc discord call

ayhamA -- 2019-10-20 18:55
    - Initalized repo and added collaborators, expecting finalized design doc and roles in due time.
    - Used draw.io
    - Added coherency to maps, and improved component flow
    - Proofread

amandaZ -- 2019-10-21 20:27
    Article One Summary (https://www.sqlitetutorial.net/sqlite-tutorial/sqlite-join/):
    -There are multiple ways to query data from two tables. The methods include inner join, left join, and cross join
        -inner join: if a row satisfies the join condition listed after on command, the colums of rows from the tables are combined into one resulting table
        -left join: joins tables based on join condition listed after on command but will include all rows of left table and and put null into corresponding columns of right table if it doens't exist
        -cross join: has no join condition and will combine every row of first and second table together
        -where: gives a condition on the resulting table displayed
        -order by: order the resulting data table alphabetically by a certain column
        -using: a replacement for join condition if two tables have matching clauses

    We will need these different join methods to traverse between our database files. For example, to
let users read a story that they edited would require left join where the condition is the story name
which might give us either the html file of the story or give us null. Moreover, for when editing new
stories, we have to overwrite both tables so we might just combine them using cross join before
editing everything.


chenJ -- 2019-10-21 21:02
	Article Two Summary (sqlitetutorial.net/sqlite-inner-join/):
	- The "INNER JOIN" clause allows users to combine two tables by comparing foreign keys. This
clause is commonly used to link columns from different tables, via a "common factor". For example, as
used in the tutorial, suppose you have the following tables:
	Table A:		Table B:
	m	f		n	f
	1	1		1	1
	2	2		2	3
	3	3		3	5
Then, "INNER JOIN B on B.f = A.f" will result in the table:
	Table Result:
	m	A.f	B.f	n
	1	1	1	1
	3	3	3	2
We can use this to relate the users to their edits and account information. In one table, we can have
the user's account information, such as emails, passwords, and profile pictures. In a table, we can
have their recent updates. The "common factor" between the tables is the username, which we can then
use INNER JOIN to bring together.

	"Programming Sucks" Summary and Lesson:
	- This humorous article explains the hectic life of a programmer: hacking toegher chunks of
code that hopefully some idiot won't change and break. To the author, programming is about scrambling
to uphold the large system that is the world. There are just some things that are beyond our control
(for example, the author mentions some 'idiots' changing the code, leading to a system breaking
down). Instead of controlling every possible variable and becoming stressed as a result, we need to
learn how to work with the flaws of the system and live with it.


caoT -- 2019-10-21 22:44
	Article Three Summary (sqlitetutorial.net/sqlite-left-join/)
	- The LEFT JOIN clause allows users to combine information from two tables by looking for a common
factor in both. The query call for this clause is usually “table_A LEFT JOIN table_B ON [insert expression]”
after the usual queries of SELECT and FROM.
	- Something important to note is that all the rows in table_A are included in the result, while only the rows
in table_B that correspond to the rows in table_A will be displayed. This makes the ordering of tables very
important when using LEFT JOIN and is what sets LEFT JOIN apart from other JOIN clauses.
	- Other additional queries are WHERE and ORDER BY, both of which follow the LEFT JOIN clause. WHERE is a search
condition that makes results displayed even more specific and narrowed, while ORDER BY allows the user to specify
the order they want their resulting data to be displayed (e.g. by ascending ID number).
	- For example, given a table of students and their IDs, and another table of classes with the ID of the student
taking the class:

	students (table_A)		classes (table_B)
	name		id		class		id

	Amanda		1		softdev		1
	Tiffany		2		softdev		3
	Ayham		3		calculus	4
	Jesse		4		spanish		5

	- Say, you want to create a joined table of each student’s name and ID and the classes they take, which would use
“SELECT name, students.id, class FROM”. You would join the tables by their common factor of ID number, by using the
conditional expression “students.id = classes.id" as in “table_A LEFT JOIN table_B ON students.id = classes.id”.
You also want the students to be displayed in alphabetical order so you would add “ORDER BY name”. The full query is
“SELECT name, students.id, class FROM students LEFT JOIN classes ON students.id = classes.id ORDER BY name”.
	- The result would look like this:

	name		id		class

	Amanda		1		softdev
	Ayham		3		softdev
	Jesse		4		calculus
	Tiffany		2		null

	- As displayed by the joint table, information from table_B, classes, was combined onto table_A, students. The names are
listed in alphabetical order, and note that all the rows from table_A were displayed, while only relevant information
from table_B were shown. Something to note is that for the name “Tiffany”, the class value is null because there were no
classes from table_B that had the matching ID for “Tiffany”.

	The LEFT JOIN clause can be very useful in our game implementation. Our database will have two main tables, one for
keeping stories and their latest edits, and one for storing users, their account information, and associated stories. LEFT JOIN
would allow us to find specific information about a story or a user. For example, we could find for each story the users that
have edited it by performing “stories LEFT JOIN users” on the condition that the story title is found in a user’s “edited_stories”
column (which is stored in the users table). Similarly, we could find for each user the stories for which they are the last editor,
by performing “users LEFT JOIN stories” on the condition that the user’s name is found in a story’s “Last Editor” column. This can
be done for a variety of combinations involving different information pertaining to a user or story.

alnasserA -- 2019-10-21 23:16
	Article Four Summary (sqlitetutorial.net/sqlite-cross-join/)
	The CROSS JOIN operation finds the Cartesian Product of two tables. Effectively, making a punnett square of the two tables with
the total row count being equal to the product of the row count of the first and second table. This operation is very slow as it
needs to operate in quadratic time.
	Take table A and table B. Table A has rows a,b,c and table B has rows x,y,z. Cross joining these two tables will form a new
table, with rows: xa,xb,xc,ya,yb,yc,za,zb,zc. This table: A cross B (A X B), let's call it C, has nine rows, is the product of the
three rows, from table A, to the three rows from table B.
	Its uses are minimal but nonnegligible. Although it forms massive unwieldly tables that, if done poorly, will slow the program
to a crawl; being able to merge two tables in this way could be very useful when viewing the total number of stories edited. We have two
tables in our program. One with the user names and log ins, and one with the list of stories and edits. Cross joining these two tables
will form a bunch of useless rows that do nothing. But there are a few rows: ones that contain the user name and the stories they
edited. We can take these outputted rows to the user when they request the stories they edited, and then KILL the table because it
wastes a lot of memory for unnecessary crosses.

caoT -- 2019-10-22 00:54
  - Updated design.pdf with new component map using draw.io
  - Added clarity and development to some components of the program suggested by classmates

zhengA -- 2019-10-22  8:45
  -planned out mechanism for queue
  -going to use a queue so that only one person can edit as a time
  -queue allows for popping off the latest user that finished edit and shrink edits
  -search mechanism requires sqlite stuff, but planned out which rows and colums are going to be used

caoT -- 2019-10-22 19:44
  - Created html pages for landing page (also login), homepage (stories), sign up, and logout
  - Facilitated the storing of html form data into the users database
  - Checked for user login credentials by searching the users database for correct the username and password match
    - flashes messages for when a username or password is nonexistent or incorrect
  - When creating an account, made sure to check that "password" and "re-enter password" were the same
  - Sign up and logout buttons link to their respective routes

zhengA --2019-10-23 23:45
  -experimented with implementation of queue and realized I need indexes and remove from middle if someone exits
  -so changed mind and is using lists now for the "line"
  -problem: if they exit website from edit page, we don't know they disconnected and thus they stay in line...
  -maybe if we can get url or see if the user is still on the edit page???

chenJ -- 2019-10-24 08:25
	-db_builder.py now includes code to create both tables. Variable names are in accordance with the documentation. Table information comments are also added.

caoT -- 2019-10-25 07:52
  - attempted to create hovering dropdown menu for easy access to homepage, search page, and logout, but realized it required CSS
  - when creating an account, there's a function that now checks the database to see if the username already exists. If it does, flash a message for a new username.
  -finding ways to circumvent the nasty asthetics caused by ban of css
  
alnasserA -- 2019-10-25 08:40
	-working on text editor for user editing stories
	-making editing text options with html tags saved in stories db and then actually displaying it when user is viewing full story 
	-making all the python follow PEP 8 standards
chenJ -- 2019-10-25 08:30
	-populating databases
	-making sure can write/read in certain routes
	-using db builder to get data for app.py 
	-app.py will contain all db modifers
	-makes sure login and stuff is dependent on csv file
zhengA -- 2019-10-25 08:45
	-working on searching mechanism for tags, using LIKE command and searching substring using user input
	-working on search mechanism for story titles, compiling list of all story titles and retrieving data for them
	-intersecting lists for tags and titles if user inputs both
  
chenJ -- 2019-10-25 23:33
	- finished db_builder.py that will run and create tables from the csv file containing the basic information
	- two tables are in the database:
		-edits
		-users
zhengA -- 2019-10-25 23:56
	- Finalized a search mechanism and became PEP 8 compliant

caoT -- 2019-10-26 00:00
	- Incorporated Jinja2 templating into the header, footer, and title cards for the webpages

alnasserA -- 2019-10-26 00:12
	- Debugged our team's program issues over the virtual discord campfire and helped moved the project forward with GET a		and POST methods

chenJ -- 2019-10-26 23:39
	Updates of today's session, as of timestamp above (edits from everyone):
	- made storyeditor.html and viewstory.html
		- storyeditor.html: takes in previous_entry and displays it, then has textarea for new input
		- viewstory.html: takes in title and entire_story from database and displays it
	- made the routes /editstory and /viewstory, each corresponding to the htmls above
	- worked on route and html for editing profile information
	- improved the queue and waitlist system
	- redesigned database so that the column that stores the entire story is separated by pipes
		- each pipe ("|") separates an edit
		- when the value is obtained, .split() is used to make a list of each edit
		- when edits are over a certain number, the story terminates

